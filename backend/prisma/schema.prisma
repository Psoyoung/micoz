generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                       String             @id @default(cuid())
  email                    String             @unique
  firstName                String
  lastName                 String
  phone                    String?
  password                 String
  avatar                   String?
  verified                 Boolean            @default(false)
  birthDate                DateTime?
  gender                   Gender?
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  skinType                 SkinType?
  skinConcerns             String?
  newsletterSubscribed     Boolean            @default(false)
  marketingConsent         Boolean            @default(false)
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  lastLoginAt              DateTime?
  addresses                Address[]
  answerVotes              AnswerVote[]
  answers                  Answer[]
  tipComments              BeautyTipComment[]
  followedTips             BeautyTipFollow[]
  tipVotes                 BeautyTipVote[]
  beautyTips               BeautyTip[]
  sentNotifications        Notification[]     @relation("NotificationSender")
  notifications            Notification[]
  orders                   Order[]
  paymentMethods           PaymentMethod[]
  questionVotes            QuestionVote[]
  questions                Question[]
  reviewComments           ReviewComment[]
  reviewVotes              ReviewVote[]
  reviews                  Review[]
  wishlistItems            WishlistItem[]

  @@map("users")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  firstName String
  lastName  String
  company   String?
  address1  String
  address2  String?
  city      String
  state     String
  zipCode   String
  country   String   @default("KR")
  phone     String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@map("addresses")
}

model Product {
  id               String           @id @default(cuid())
  name             String
  description      String
  shortDescription String?
  price            Int
  compareAtPrice   Int?
  sku              String           @unique
  barcode          String?
  category         String
  subCategory      String?
  brand            String           @default("MICOZ")
  ingredients      String?
  usage            String?
  inventory        Int              @default(0)
  trackInventory   Boolean          @default(true)
  slug             String           @unique
  images           String?
  featured         Boolean          @default(false)
  isNew            Boolean          @default(false)
  isBestseller     Boolean          @default(false)
  status           ProductStatus    @default(ACTIVE)
  publishedAt      DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  orderItems       OrderItem[]
  variants         ProductVariant[]
  questions        Question[]
  reviews          Review[]
  wishlistItems    WishlistItem[]

  @@map("products")
}

model ProductVariant {
  id         String      @id @default(cuid())
  productId  String
  name       String
  sku        String      @unique
  price      Int
  inventory  Int         @default(0)
  position   Int         @default(0)
  orderItems OrderItem[]
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model Order {
  id                String            @id @default(cuid())
  userId            String
  orderNumber       String            @unique
  subtotal          Int
  taxAmount         Int               @default(0)
  shippingCost      Int               @default(0)
  discountAmount    Int               @default(0)
  totalAmount       Int
  status            OrderStatus       @default(PENDING)
  paymentStatus     PaymentStatus     @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  addressId         String
  shippingMethod    String?
  trackingNumber    String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  shippedAt         DateTime?
  deliveredAt       DateTime?
  orderItems        OrderItem[]
  address           Address           @relation(fields: [addressId], references: [id])
  user              User              @relation(fields: [userId], references: [id])
  payments          Payment[]

  @@map("orders")
}

model OrderItem {
  id        String          @id @default(cuid())
  orderId   String
  productId String
  variantId String?
  quantity  Int
  price     Int
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  product   Product         @relation(fields: [productId], references: [id])
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  amount        Int
  currency      String        @default("KRW")
  paymentMethod String
  status        PaymentStatus @default(PENDING)
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model PaymentMethod {
  id            String   @id @default(cuid())
  userId        String
  type          String
  provider      String
  last4         String
  isDefault     Boolean  @default(false)
  encryptedData String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model Review {
  id                 String          @id @default(cuid())
  userId             String
  productId          String
  rating             Int
  title              String?
  comment            String
  images             String?
  verified           Boolean         @default(false)
  helpful            Int             @default(0)
  skinType           SkinType?
  skinConcerns       String?
  effectsExperienced String?
  wouldRecommend     Boolean         @default(true)
  repurchaseIntent   Boolean         @default(false)
  usageDuration      String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  comments           ReviewComment[]
  reviewVotes        ReviewVote[]
  product            Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model ReviewVote {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  isHelpful Boolean
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
  @@map("review_votes")
}

model ReviewComment {
  id        String          @id @default(cuid())
  reviewId  String
  userId    String
  content   String
  parentId  String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  parent    ReviewComment?  @relation("ReviewCommentReplies", fields: [parentId], references: [id])
  replies   ReviewComment[] @relation("ReviewCommentReplies")
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  review    Review          @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("review_comments")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Question {
  id         String           @id @default(cuid())
  userId     String
  productId  String
  title      String
  content    String
  category   QuestionCategory @default(GENERAL)
  status     QuestionStatus   @default(PENDING)
  upvotes    Int              @default(0)
  downvotes  Int              @default(0)
  isAnswered Boolean          @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  answers    Answer[]
  votes      QuestionVote[]
  product    Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model Answer {
  id         String       @id @default(cuid())
  questionId String
  userId     String
  content    String
  isOfficial Boolean      @default(false)
  isAccepted Boolean      @default(false)
  upvotes    Int          @default(0)
  downvotes  Int          @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  votes      AnswerVote[]
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answers")
}

model QuestionVote {
  id         String   @id @default(cuid())
  questionId String
  userId     String
  isUpvote   Boolean
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, userId])
  @@map("question_votes")
}

model AnswerVote {
  id        String   @id @default(cuid())
  answerId  String
  userId    String
  isUpvote  Boolean
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@unique([answerId, userId])
  @@map("answer_votes")
}

model BeautyTip {
  id         String             @id @default(cuid())
  userId     String
  title      String
  content    String
  category   BeautyTipCategory
  tags       String?
  images     String?
  skinTypes  String?
  difficulty TipDifficulty      @default(BEGINNER)
  views      Int                @default(0)
  upvotes    Int                @default(0)
  downvotes  Int                @default(0)
  status     TipStatus          @default(PUBLISHED)
  featured   Boolean            @default(false)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  comments   BeautyTipComment[]
  followers  BeautyTipFollow[]
  votes      BeautyTipVote[]
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("beauty_tips")
}

model BeautyTipVote {
  id        String    @id @default(cuid())
  tipId     String
  userId    String
  isUpvote  Boolean
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tip       BeautyTip @relation(fields: [tipId], references: [id], onDelete: Cascade)

  @@unique([tipId, userId])
  @@map("beauty_tip_votes")
}

model BeautyTipComment {
  id        String             @id @default(cuid())
  tipId     String
  userId    String
  content   String
  parentId  String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  parent    BeautyTipComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   BeautyTipComment[] @relation("CommentReplies")
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  tip       BeautyTip          @relation(fields: [tipId], references: [id], onDelete: Cascade)

  @@map("beauty_tip_comments")
}

model BeautyTipFollow {
  id        String    @id @default(cuid())
  tipId     String
  userId    String
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tip       BeautyTip @relation(fields: [tipId], references: [id], onDelete: Cascade)

  @@unique([tipId, userId])
  @@map("beauty_tip_follows")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  senderId  String?
  type      NotificationType
  title     String
  message   String
  data      String?
  read      Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  sender    User?            @relation("NotificationSender", fields: [senderId], references: [id])
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum SkinType {
  OILY
  DRY
  COMBINATION
  SENSITIVE
  NORMAL
}

enum ProductStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIAL
  FULFILLED
  RETURNED
}

enum QuestionCategory {
  GENERAL
  USAGE
  INGREDIENTS
  EFFECTS
  SHIPPING
  RETURN
  SIZE
  COLOR
}

enum QuestionStatus {
  PENDING
  ANSWERED
  CLOSED
}

enum BeautyTipCategory {
  SKINCARE
  MAKEUP
  HAIRCARE
  NAILCARE
  BODYCARE
  ROUTINE
  PRODUCT_REVIEW
  TUTORIAL
  LIFESTYLE
}

enum TipDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum TipStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  FEATURED
}

enum NotificationType {
  REVIEW_COMMENT
  REVIEW_VOTE
  QUESTION_ANSWERED
  ANSWER_ACCEPTED
  QUESTION_VOTE
  ANSWER_VOTE
  TIP_COMMENT
  TIP_VOTE
  TIP_FEATURED
  FOLLOW_TIP
  MENTION
  SYSTEM
}

enum BehaviorAction {
  VIEW
  ADD_TO_CART
  REMOVE_FROM_CART
  PURCHASE
  ADD_TO_WISHLIST
  REMOVE_FROM_WISHLIST
  SEARCH
  FILTER
  REVIEW
  SHARE
}

enum SimilarityType {
  CONTENT_BASED
  COLLABORATIVE
  HYBRID
}

enum RecommendationAlgorithm {
  CONTENT_BASED
  COLLABORATIVE_FILTERING
  HYBRID
  POPULARITY_BASED
  RECENTLY_VIEWED
  FREQUENTLY_BOUGHT_TOGETHER
}
