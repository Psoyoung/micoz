# Task ID: 1
# Title: 프로젝트 저장소 및 기본 아키텍처 설정
# Status: done
# Dependencies: None
# Priority: high
# Description: PRD에 명시된 기술 요구사항에 따라 React.js 18 프론트엔드와 Node.js 18 백엔드 구조로 프로젝트 저장소를 초기화합니다.
# Details:
1. 프론트엔드와 백엔드 디렉토리를 분리한 모노레포 구조 생성
2. 프론트엔드 설정:
   - TypeScript와 함께 React 18 초기화
   - 스타일링을 위한 Styled-components 설정
   - 상태 관리를 위한 Redux Toolkit 설정
   - React Router v6 설정
   - 애니메이션을 위한 Framer Motion 설치
3. 백엔드 설정:
   - Express.js와 함께 Node.js 18 초기화
   - Prisma ORM을 사용한 PostgreSQL 연결 설정
   - 기본 JWT 인증 구조 설정
   - 파일 저장을 위한 AWS S3 연결 설정
4. 개발 환경 설정:
   - ESLint 및 Prettier 설정
   - Husky를 사용한 Git hooks 설정
   - 개발 환경용 Docker 설정 생성

# Test Strategy:
1. 모든 의존성이 올바르게 설치되고 작동하는지 확인
2. 개발 서버가 오류 없이 시작되는지 확인
3. 프론트엔드와 백엔드 간 연결 검증
4. 데이터베이스 연결 및 기본 CRUD 작업 테스트
5. 파일 업로드를 위한 AWS S3 연결 확인

# Subtasks:
## 1. 모노레포 구조 및 기본 설정 초기화 [done]
### Dependencies: None
### Description: 프론트엔드와 백엔드 디렉토리를 분리한 기초 모노레포 구조를 생성하고, 기본 package.json 파일을 초기화하며, 워크스페이스 설정을 설정합니다.
### Details:
/frontend와 /backend 폴더가 있는 루트 디렉토리 구조를 생성합니다. 모노레포 관리를 위한 워크스페이스 설정으로 루트에 package.json을 초기화합니다. 기본 .gitignore, README.md, 환경변수 템플릿 (.env.example)을 설정합니다. 프론트엔드와 백엔드 모두에서 의존성을 관리하기 위해 npm/yarn 워크스페이스를 설정합니다.

## 2. Setup React 18 Frontend with TypeScript and Core Dependencies [done]
### Dependencies: 1.1
### Description: Initialize React 18 application with TypeScript, install and configure Styled-components, Redux Toolkit, React Router v6, and Framer Motion.
### Details:
Use create-react-app with TypeScript template in /frontend directory. Install styled-components with TypeScript support, Redux Toolkit with RTK Query, React Router v6, and Framer Motion. Configure TypeScript strict mode, setup basic folder structure (components, pages, store, styles, types). Create initial Redux store configuration and basic routing setup.

## 3. Setup Node.js Backend with Express and Database Configuration [done]
### Dependencies: 1.1
### Description: Initialize Node.js 18 backend with Express.js framework, configure PostgreSQL connection using Prisma ORM, and setup basic server structure.
### Details:
Initialize Node.js project in /backend directory with Express.js. Install Prisma ORM and configure PostgreSQL connection. Create basic server structure with middleware setup (cors, helmet, express.json). Initialize Prisma schema with basic user model. Setup environment configuration for database URL and other secrets. Create basic API routes structure.

## 4. Configure Authentication Infrastructure and AWS S3 Integration [done]
### Dependencies: 1.3
### Description: Setup JWT authentication structure in the backend and configure AWS S3 connection for file storage capabilities.
### Details:
Install and configure JWT authentication packages (jsonwebtoken, bcryptjs). Create authentication middleware for token verification. Setup JWT signing and refresh token logic. Install AWS SDK and configure S3 client with environment variables. Create file upload utilities and middleware for handling multipart form data. Implement basic user registration and login endpoints with password hashing.

## 5. Setup Development Environment and Docker Configuration [done]
### Dependencies: 1.2, 1.3
### Description: Configure development tools including ESLint, Prettier, Husky git hooks, and create Docker configuration for consistent development environment.
### Details:
Install and configure ESLint with TypeScript rules for both frontend and backend. Setup Prettier with consistent formatting rules across the project. Install Husky and configure pre-commit hooks for linting and formatting. Create Docker Compose configuration with services for React app, Node.js API, and PostgreSQL database. Include volume mounts for development hot-reloading. Create development startup scripts.

## 6. Create Monorepo Structure and Initialize Project Directories [done]
### Dependencies: None
### Description: Set up the basic monorepo structure with separate frontend and backend directories, initialize package.json files, and configure workspace management.
### Details:
Create root directory structure with /frontend and /backend folders. Initialize root package.json with workspace configuration. Set up basic .gitignore, README.md, and directory structure. Configure npm/yarn workspaces for monorepo management.

## 7. Initialize React 18 Frontend with TypeScript and Core Dependencies [done]
### Dependencies: 1.1
### Description: Set up React 18 application with TypeScript, install and configure Styled-components, Redux Toolkit, React Router v6, and Framer Motion.
### Details:
Use create-react-app with TypeScript template. Install styled-components with TypeScript definitions. Configure Redux Toolkit store structure with basic slices. Set up React Router v6 with basic routing structure. Install Framer Motion for animations. Configure TypeScript strict mode and path aliases.

## 8. Initialize Node.js 18 Backend with Express and Database Configuration [done]
### Dependencies: 1.1
### Description: Set up Node.js 18 backend with Express.js framework, configure PostgreSQL connection using Prisma ORM, and establish basic server structure.
### Details:
Initialize Node.js project with Express.js. Install and configure Prisma ORM with PostgreSQL adapter. Create basic database schema and run initial migration. Set up Express middleware for CORS, body parsing, and error handling. Configure environment variables for database connection.

## 9. Configure Authentication Structure and AWS S3 Integration [done]
### Dependencies: 1.3
### Description: Set up JWT authentication infrastructure and configure AWS S3 connection for file storage on the backend.
### Details:
Install and configure JWT libraries (jsonwebtoken, bcryptjs). Create user authentication middleware and basic auth routes structure. Install AWS SDK and configure S3 bucket connection. Create file upload middleware using multer and S3. Set up environment variables for JWT secrets and AWS credentials.

## 10. Setup Development Environment and Tools Configuration [done]
### Dependencies: 1.2, 1.3
### Description: Configure development tools including ESLint, Prettier, Husky git hooks, and Docker development environment.
### Details:
Install and configure ESLint with TypeScript rules for both frontend and backend. Set up Prettier with consistent formatting rules. Configure Husky for pre-commit hooks running linting and formatting. Create Docker Compose configuration for development environment including PostgreSQL service. Set up VS Code workspace settings and recommended extensions.

